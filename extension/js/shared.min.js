var masterColor = ['#5d78ff', '#fd397a', '#ffb822', '#0abb87', '#48465b', '#646c9a'];
$(function () {
    var url = window.location.href;
    var domain = new URL(url).href.split('#')[1].replace('www', '');
    var date = new Date();
    var headerTimes = moment(date).format('MM.YYYY')
    $('.similarDates').text(headerTimes);
    $('.website').html(domain);
       


    if (domain) {
        Api('getHeader', domain);
        Api('getTrafficAndEngagementVisitsMonthly', domain);
        Api('getTrafficAndEngagementOverviewMonthly', domain);
        Api('getDesktopVsMobileVisits', domain);
        Api('getWebsiteGeography', domain);
        Api('estmatedWorth', domain);
        Api('getTrafficSourcesOverview', domain);

        $('#overview,#more-traffic,#btn-go,#link-header').attr('href', 'https://webrank.vn/rank/' + domain);
        $('#organic').attr('href', 'https://webrank.vn/index.php?view=website&action=organic&domain=' + domain);
        $('#ads').attr('href', 'https://webrank.vn/index.php?view=website&action=googleads&domain=' + domain)
        $('#display').attr('href', 'https://webrank.vn/index.php?view=website&action=displayads&domain=' + domain)
        $('#social').attr('href', 'https://webrank.vn/index.php?view=website&action=social&domain=' + domain)
        $('#backlink').attr('href', 'https://webrank.vn/index.php?view=website&action=backlink&domain=' + domain)


        setTimeout(() => {
            showResult();
        }, 2500);

    } else {
        $('.loader').hide();
        $('.no-data').show();
    }
})



var showResult = () => {
    $('#loader').hide();
    $('#section-content').show();
}

var Api = async (task, domain) => {
    try {
        var userToken = 'ZGdZVktsdE91by9qOUtndjc4MjYwTHdQeXllT3NKTS9ZUHVzdThJYTNWST06OhMNb7G48NOo6noCn1JFw0I';
        return await $.ajax({
            // url: `https://localapi.trazk.com/webdata/websiteapi.php?task=${task}&domain=${domain}`,
            url: `https://localapi.trazk.com/webdata/v3.1.php?task=${task}&domain=${domain}&reload=0&userToken=${userToken}`,
            type: "GET"
        }).then(res => {
            const data = res;
            //console.log(checkData(data, task));

            if (checkData(data, task) == false) {
                switch (task) {
                    case "getHeader":
                        getHeader(data);
                        break;
                    case "estmatedWorth":
                        estmatedWorth(data);
                        break;
                    case "getTrafficAndEngagementVisitsMonthly":
                        getTrafficAndEngagementVisitsMonthly(task, domain, data);
                        break;
                    case 'getTrafficAndEngagementOverviewMonthly':
                        getTrafficAndEngagementOverviewMonthly(task, data);
                    default:
                        break;
                    case "getDesktopVsMobileVisits":
                        getDesktopVsMobileVisits(task, data);
                        break;
                    case "getWebsiteGeography":
                        getWebsiteGeography(task, data);
                        break;
                    case "getTrafficSourcesOverview":
                        getTrafficSourcesOverview(task, data);
                        break;
                }
                return;
            }
        })
    } catch (error) {
        //console.log(error);
    }
}

var checkData = (data, task) => {
    $.each(data, (index, item) => {
        if (typeof item == "object") {
            if (!item || item.length == 0) {
                if ($(`#${task}`).hasClass('is-loading')) {
                    $(`#${task}`).removeClass('is-loading').addClass('empty-state');
                } else if ($(`#${task}`).find('.is-loading').length > 0) {
                    $(`#${task}`).find('.is-loading').removeClass('is-loading').addClass('empty-state');
                } else {
                    $(`#${task}`).addClass('empty-state');
                }
                return true;
            } else {
                $.each(item, (data, website) => {
                    if (!data || data.length == 0) {
                        if ($(`#${task}`).hasClass('is-loading')) {
                            $(`#${task}`).removeClass('is-loading').addClass('empty-state');

                        } else if ($(`#${task}`).find('.is-loading').length > 0) {
                            $(`#${task}`).find('.is-loading').removeClass('is-loading').addClass('empty-state');

                        } else {
                            $(`#${task}`).addClass('empty-state');

                        }
                        return true;
                    }
                })
            }
        }
    });
    return false;
}


getTrafficAndEngagementVisitsMonthly = async (task, domain, data) => {
    if (data && data.data && data.data.data && data.data.data.Data && data.data.data.Data.Data) {
        let { Data } = data.data.data.Data;

        let TrafficAndEngagementVisits = Data[domain];

        let Desktop = TrafficAndEngagementVisits.Desktop[0];
        let Mobile = TrafficAndEngagementVisits['Mobile Web'][0];
        if (Desktop && Mobile) {
            let DesktopSplit = Desktop;
            let MoblieSplit = Mobile;
            if (Desktop.length > 6) DesktopSplit = Desktop.slice(Desktop.length - 6);
            if (Mobile.length > 6) MoblieSplit = Mobile.slice(Mobile.length - 6);


            let dataChartDesktop = {
                keys: [],
                values: []
            };
            DesktopSplit.map(desktop => {
                let key = desktop.Key;
                let value = desktop.Value;
                dataChartDesktop.keys.push(key);
                dataChartDesktop.values.push(value);
            });

            let dataChartMobile = {
                keys: [],
                values: []
            };


            MoblieSplit.map(mobile => {
                let key = mobile.Key;
                let value = mobile.Value;
                dataChartMobile.keys.push(key);
                dataChartMobile.values.push(value);
            });
            let sum_time_access = {
                keys: [],
                values: []
            };
            Desktop.map(function (num, idx) {
                let value = num.Value + dataChartMobile.values[idx];
                sum_time_access.keys.push(num.Key)
                sum_time_access.values.push(value)
            });


            let ele = document.getElementById("getTrafficAndEngagementVisitsMonthly");
            let myChart = echarts.init(ele);


            let option = {
				color:masterColor,
                tooltip: {
                    trigger: "axis",
                    backgroundColor: 'rgba(255, 255, 255, 1)',
                    borderColor: 'rgba(93,120,255,1)',
                    borderWidth: 1,
                    extraCssText: 'padding: 10px; box-shadow: 0 .125rem .25rem rgba(0,0,0,.075);',
                    formatter: params => {
                        // //console.log(params);
                        let {
                            name
                        } = params[0];
                        let {
                            marker: mrkr1,
                            color: color1,
                            seriesName: name1,
                            value: val1
                        } = params[0];
                        let {
                            marker: mrkr2,
                            color: color2,
                            seriesName: name2,
                            value: val2
                        } = params[1];
                        let {
                            marker: mrkr3,
                            color: color3,
                            seriesName: name3,
                            value: val3
                        } = params[2];

                        name = moment(name).format('DD MMMM YYYY');
                        val1 = numeral(val1).format('0,0');
                        val2 = numeral(val2).format('0,0');
                        val3 = numeral(val3).format('0,0');

                        return `<div class="text-dark text-capitalize border-bottom pb-1">${name}</div>
            <div class="text-dark pt-2">
                ${mrkr3} ${name3} <span style="color:${color3};font-weight:bold">${val3}</span>
                <br/>
                ${mrkr2} ${name2} <span style="color:${color2};font-weight:bold">${val2}</span>
                <br/>
                ${mrkr1} ${name1} <span style="color:${color1};font-weight:bold">${val1}</span>
            </div>`;
                    }
                },
                legend: {
                    data: ['Desktop', 'Mobile', 'Tổng'],
                    show: true,
                    top: 10,
                },
                grid: {
                    left: '5%',
                    right: '6%',
                    bottom: '0%',
                    containLabel: true
                },
                xAxis: [{
                    type: 'category',
                    boundaryGap: false,
                    data: dataChartDesktop.keys,
                    axisLine: {
                        lineStyle: {
                            color: "#ccc"
                        }
                    },
                    axisTick: {
                        interval: (i, v) => {
                            if (task == 'getTrafficAndEngagementVisitsWeekly') {
                                return (parseInt(v.slice(-2)) < 7)
                            } else {
                                return (v.slice(-2) == '01')
                            }
                        },
                    },
                    axisLabel: {
                        margin: 10,
                        textStyle: {
                            color: "#BDBDBD",
                        },
                        fontFamily: 'Arial',
                        interval: (i, v) => {
                            if (task == 'getTrafficAndEngagementVisitsWeekly') {
                                return (parseInt(v.slice(-2)) < 7)
                            } else {
                                return (v.slice(-2) == '01') ? moment(v).format("MM/YYYY") : ''
                            }
                        },
                        formatter: (value, index) => {
                            if (task == 'getTrafficAndEngagementVisitsWeekly') {
                                return moment(value).format('MM-YYYY');
                            } else {
                                return (value.slice(-2) == '01') ? moment(value).format("MM/YYYY") : ''
                            }
                        },

                    },
                }],
                yAxis: [{
                    type: "value",
                    axisLine: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLabel: {
                        margin: 10,
                        textStyle: {
                            color: "#ccc"
                        },
                        fontFamily: 'Arial',
                        formatter: (value, index) => (value = numeral(value).format("0a"))
                    },
                    splitLine: {
                        show: true,
                        lineStyle: {
                            color: '#F2F2F2'
                        }
                    },
                },],
                series: [{
                    name: 'Desktop',
                    type: 'line',
                    stack: "0",
                    areaStyle: {
                        color: 'rgb(79, 141, 249)'
                    },
                    symbol: "none",
                    itemStyle: {
                        color: 'rgb(79, 141, 249)'
                    },
                    data: dataChartDesktop.values
                },
                {
                    name: 'Mobile',
                    type: 'line',
                    stack: "0",
                    areaStyle: {
                        color: "#0abb87"
                    },
                    symbol: "0",
                    itemStyle: {
                        color: "#0abb87"
                    },
                    data: dataChartMobile.values
                },
                {
                    name: 'Tổng',
                    type: 'line',
                    stack: "0",

                    data: sum_time_access.values,
                    symbol: "circle",
                    symbolSize: 10,
                    showSymbol: true,
                    hoverAnimation: false,
                    lineStyle: {
                        normal: {
                            width: 2,
                            shadowColor: "rgba(0,0,0,0.4)",
                            shadowBlur: 10,
                            shadowOffsetY: 10
                        }
                    },
                    itemStyle: {
                        normal: {
                            color: "#FFB822",
                            borderColor: "rgba(241, 196, 15, 0.2)",
                            borderWidth: 10
                        }
                    }
                }
                ]
            };

            myChart.setOption(option);


            const lastdate = dataChartMobile.keys.length;

            $('.similarDatesD').text(`${moment(dataChartMobile.keys[0]).format("MM/YYYY")} - ${moment(dataChartMobile.keys[lastdate - 1]).format("MM/YYYY")}`);

            await $(`#${task}`).removeClass('is-loading');
        } else {
            await $(`#${task}`).removeClass('is-loading').addClass('empty-state');
        }
    } else {
        await $(`#${task}`).removeClass('is-loading').addClass('empty-state');
    }
}

getTrafficAndEngagementOverviewMonthly = (task, data) => {
    if (data.data.data.Data) {
        const TrafficAndEngagementOverviewMonthly = data.data.data.Data;

        let MonthlyVisits = numeral(TrafficAndEngagementOverviewMonthly.AvgMonthVisits).format("0,0");
        let MonthlyUniqueVisitors = numeral(TrafficAndEngagementOverviewMonthly.UniqueUsers).format("0,0");
        let AvgVisitDuration = numeral(TrafficAndEngagementOverviewMonthly.AvgVisitDuration).format("0:00:00");
        let PagesperVisit = numeral(TrafficAndEngagementOverviewMonthly.PagesPerVisit).format("0.00");
        let BounceRate = numeral(TrafficAndEngagementOverviewMonthly.BounceRate).format("00.00%");

        $('.detail-visit-overview').removeClass('d-none');

        $('.BounceRate').text(BounceRate);
        $('.MonthlyUniqueVisitors').text(MonthlyUniqueVisitors);
        $('.AvgVisitDuration').text(AvgVisitDuration);
        $('.PagesperVisit').text(PagesperVisit);
        $('.MonthlyVisits').text(MonthlyVisits);
    }
}

formatNumber = (value) => {
    valueB = value.split('b');
    valueM = value.split('m');
    if (valueB.length == 2) {
        return valueB[0] + ' tỉ';
    } else if (valueM.length == 2) {
        return valueM[0] + ' triệu';
    } else {
        return value;
    }
}

getDesktopVsMobileVisits = async (task, data) => {
    if (data.data.data) {
        const Data = data.data.data;

        let percentDesktop = Data.percentDesktop;
        let percentMobile = Data.percentMobile;
        let totalDesktop = Data.totalDesktop;
        let totalMobile = Data.totalMobile;
        let totalTraffic = Data.totalTraffic;


        let dataChart = [{
            name: 'Máy tính',
            value: percentDesktop
        },
        {
            name: 'Điện thoại',
            value: percentMobile
        }
        ];


        let ele = document.getElementById('getDesktopVsMobileVisits');

        let myChart = echarts.init(ele);

        let option = {
            color:masterColor,
            legend: {
                bottom: "2%",
                
               
                textStyle: {
                    fontFamily: 'Arial',
                    lineHeight: 12
                },
                formatter: function (name) {
                    let value = name == 'Máy tính' ? totalDesktop : totalMobile;
                    return `${name}\n(${value > 1000000 ? formatNumber(numeral(value).format('0.0a')) : formatNumber(numeral(value).format('0,0'))})`;
                }
            },
            series: [{
                type: 'pie',
                legendHoverLink: false,
                minAngle: 20,
                radius: ["40%", "60%"],
                center: ["50%", "40%"],
                avoidLabelOverlap: false,
                itemStyle: {
                    normal: {
                        borderColor: '#ffffff',
                        borderWidth: 5,
                    },
                },
                label: {
                    normal: {
                        show: false,
                        position: 'center',
                        formatter: '{text|{b}}\n{value|{d}%}',
                        rich: {
                            text: {
                                color: "#666",
                                fontSize: 12,
                                fontFamily: 'Arial',
                                align: 'center',
                                verticalAlign: 'middle',
                                padding: 5
                            },
                            value: {
                                color: "#8693F3",
                                fontSize: 24,
                                align: 'center',
                                verticalAlign: 'middle',
                            },
                        }
                    },
                    emphasis: {
                        show: true,
                        textStyle: {
                            fontSize: 46,
                        }
                    }
                },
                data: dataChart
            }]
        };
        myChart.setOption(option);


        new ResizeSensor($(`#chartTraffic`), function () {
            myChart.resize();
            setTimeout(function () {
                myChart.dispatchAction({
                    type: 'highlight',
                    seriesIndex: 0,
                    dataIndex: 0
                });
            }, 1000);
        });

        setTimeout(function () {
            myChart.dispatchAction({
                type: 'highlight',
                seriesIndex: 0,
                dataIndex: 0
            });

            myChart.on('mouseover', function (params) {
                if (params.name == dataChart[0].name) {
                    myChart.dispatchAction({
                        type: 'highlight',
                        seriesIndex: 0,
                        dataIndex: 0
                    });
                } else {
                    myChart.dispatchAction({
                        type: 'downplay',
                        seriesIndex: 0,
                        dataIndex: 0
                    });
                }
            });

            myChart.on('mouseout', function (params) {
                myChart.dispatchAction({
                    type: 'highlight',
                    seriesIndex: 0,
                    dataIndex: 0
                });
            });
        }, 1000);

        if (totalTraffic) {
            $('#totalTraffic').text(totalTraffic >= 1000000 ? formatNumber(numeral(totalTraffic).format('0.00a')) : formatNumber(numeral(totalTraffic).format("0,0")));
            $('.totalTraffic-Parent').removeClass('is-loading');
        } else {
            $('#totalTraffic').text(0);
        }
        await $('#' + task).removeClass('is-loading');
    } else {
        await $('#' + task).removeClass('is-loading').addClass('empty-state');
    }


}

const getHeader = async (data) => {

    if (data.data) {


        const {
            data: similarHeader,
        } = data.data;


        
        let {
            icon: similarIcon,
            title: similarTitle,
            description: similarDescription,
            relatedApps: similarRelatedApps,
            imageLarge: similarThumb,
            tags: similarTags,
            globalRanking: similarGlobalRank,
            highestTrafficCountryRanking: similarCountryRank,
        } = similarHeader;

        let similarThumbMobile = similarThumb.replace("t=1", "t=4");


        html = `<div class="keyword pl-3 pt-2">
        </div>
        <div class="header-thumb">
            <img id="thumb">
            <img id="thumb-mobile">
        </div>`
        $('#content-header').html(html);




        $('#icon-domain').attr('src', similarIcon);
        $('#thumb').attr({ 'src': 'https://files.fff.com.vn/f.php?url=' + btoa(similarThumb) });
        $('#thumb-mobile').attr({ 'src': 'https://files.fff.com.vn/f.php?url=' + btoa(similarThumbMobile) });

        //  //console.log(similarTags);
        html = `
    <h5 class="text-dark font-14" for="">Từ khóa</h5>
    `
        //console.log(similarTags);
        let dem = 0;
        if (similarTags && similarTags.length > 0) {

            $.each(similarTags, (key, value) => {
                if (dem < 8) {
                    html += `<span class="font-12"><a target="top" href="https://keywordplanner.vn/index.php?view=keyword-planner&action=result&keywords=${value}&language=vn&country=vn&network=web">${value}</a></span>`;
                }
                dem++;
            })

            $('.header-thumb').attr('style', 'padding-left:15px');

        } else {
            $('.header-thumb').attr('style', 'width:100%');
        }

        //console.log(html);

        if (similarTags && similarTags.length > 0) {
            $('.keyword').html(html);
        }

        $('#rank-global').text('#' + numeral(similarGlobalRank).format('0,0'));
        $('#rank-country').text('#' + numeral(similarCountryRank).format('0,0'));
        await $('#content-header').removeClass('is-loading');
        //console.log($('#content-header'))
    } else {
        await $('#content-header').removeClass('is-loading').addClass('empty-state');
    }

}


const getWebsiteGeography = async (task, data) => {
    // const task = $('#getWebsiteGeography');
    if (data.data.data) {
        const WebsiteGeography = data.data.data;
        $('#' + task).append(
            `
        <div class="column-geography-header">
            <div class="left"> Quốc gia</div>
            <div class="right">Tỷ lệ</div>
        </div>
        `
        );
        $.each(WebsiteGeography, (index, value) => {
            if (value.Country == null) return;
            $('#' + task).append(
                `    <div class="column-geography">
                <div class="left">
                   ${value.Country.text}
                </div>

                <div class="right">
                    <div>${numeral(value.Share).format('0.00%')}</div>
                    <div class="progress" style="width: 50%;">
                        <span class="progress-bar" style="width:${numeral(value.Share).format('0.00%')};"></span>
                    </div>
                </div>
            </div>
                `
            );
        })
        await $('#' + task).removeClass('is-loading');
    } else {
        await $('#' + task).removeClass('is-loading').addClass('empty-state');
    }
}

function estmatedWorth(data) {
    if (data.data) {
        // $('#estmatedWorth').text(numeral(data.data).format('0,0') + ' USD')
        $('#estmatedWorth').text(data.data >= 1000000 ? formatNumber(numeral(data.data).format('0.00a')) + " USD" : formatNumber(numeral(data.data).format("0,0")) + " USD");
        $('.totalTraffic-Parent').removeClass('is-loading');
    } else {
        $('#estmatedWorth').text(0);
    }
}


const getTrafficSourcesOverview = async (task, data) => {
    //console.log('nguon khach hang', data);


    if (data.data.data) {
        traffic = data.data.data;
        //console.log(traffic);
        let dataChart = [];

        $.each(traffic, (index, item) => {
            let key = index;
            let value = parseInt(numeral(item).format("0"));

            switch (key) {
                case 'Organic Search':
                    key = 'Tìm kiếm tự nhiên';
                    break;
                case 'Paid Search':
                    key = 'Tìm kiếm trả phí';
                    break;
                case 'Paid Referrals':
                    key = 'Quảng cáo hiển thị';
                    break;
                case 'Social':
                    key = 'Mạng xã hội';
                    break;
                case 'Referrals':
                    key = 'Liên kết ngoài';
                    break;
                case 'Mail':
                    key = 'Mail';
                    break;
                case 'Direct':
                    key = 'Trực tiếp';
                    break;
                default:
                    break;
            }
            if (value > 0) {
                dataChart.push({ value: value, name: key });
            }
        });

        //console.log(dataChart);




        let ele = document.getElementById('getTrafficSourcesOverview');

        let myChart = echarts.init(ele);

        let option = {
            color:masterColor,
            tooltip: {
                trigger: 'item',
                textStyle: {
                    fontFamily: 'Arial',
                    lineHeight: 16
                },
            },
            grid: {
                left: '0%',
                right: '0%',
            },
            legend: {
                bottom: "0%",
                data: dataChart.map(i => i.name),
               
                textStyle: {
                    fontFamily: 'Arial',
                    lineHeight: 12
                },
                formatter: function (name) {
                    value = dataChart.find(item => item.name == name).value;
                    return `${name}\n(${value > 1000000 ? formatNumber(numeral(value).format('0.0a')) : formatNumber(numeral(value).format('0,0'))})`;
                }
            },
            series: [{
                type: 'pie',
                legendHoverLink: false,
                minAngle: 20,
                radius: ["40%", "60%"],
                center: ["50%", "30%"], 
                avoidLabelOverlap: false,
                itemStyle: {
                    normal: {
                        borderColor: '#ffffff',
                        borderWidth: 5,
                    },
                },
                label: {
                    normal: {
                        show: false,
                        position: 'center',
                        formatter: '{text|{b}}\n{value|{d}%}',
                        rich: {
                            text: {
                                color: "#666",
                                fontSize: 12,
                                fontFamily: 'Arial',
                                align: 'center',
                                verticalAlign: 'middle',
                                padding: 5
                            },
                            value: {
                                color: "#8693F3",
                                fontSize: 24,
                                align: 'center',
                                verticalAlign: 'middle',
                            },
                        }
                    },
                    emphasis: {
                        show: true,
                        textStyle: {
                            fontSize: 46,
                        }
                    }
                },
                data: dataChart
            }]
        };
        myChart.setOption(option);


        new ResizeSensor($(`#chartTrafficSourcesOverview`), function () {
            myChart.resize();
            setTimeout(function () {
                myChart.dispatchAction({
                    type: 'highlight',
                    seriesIndex: 0,
                    dataIndex: 0
                });
            }, 1000);
        });

        setTimeout(function () {
            myChart.dispatchAction({
                type: 'highlight',
                seriesIndex: 0,
                dataIndex: 0
            });

            myChart.on('mouseover', function (params) {
                if (params.name == dataChart[0].name) {
                    myChart.dispatchAction({
                        type: 'highlight',
                        seriesIndex: 0,
                        dataIndex: 0
                    });
                } else {
                    myChart.dispatchAction({
                        type: 'downplay',
                        seriesIndex: 0,
                        dataIndex: 0
                    });
                }
            });

            myChart.on('mouseout', function (params) {
                myChart.dispatchAction({
                    type: 'highlight',
                    seriesIndex: 0,
                    dataIndex: 0
                });
            });
        }, 1000);


        // $('#totalTraffic').text(totalTraffic >= 1000000 ? formatNumber(numeral(totalTraffic).format('0.00a')) : formatNumber(numeral(totalTraffic).format("0,0")));
        await $('#' + task).removeClass('is-loading');
    } else {
        await $('#' + task).removeClass('is-loading').addClass('empty-state');
    }

}


